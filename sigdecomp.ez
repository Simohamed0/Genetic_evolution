/*_________________________________________________________
Under vim: syntax colouring is obtained using:
:se syn=cpp
sigdecomp.ez : décomposition de signal en somme de sinus
__________________________________________________________*/

\User declarations :
#define NB_SAMP 1000  // nombre d'échantillons 
static float sample[NB_SAMP][2]; // 2 pour x et y
#define X_MIN 0.0     // intervalle où je vais créer mes 
#define X_MAX 10.0    // 1000 échantillons
#define NB_SIN 3      // Nombre de sinus
static float tSin[NB_SIN][3]; // 3 valeurs pour AMP, FRE, PHA
\end

\Before everything else function: // typically to read data from a file
tSin[0][0] = 2.0 ; tSin[0][1] = 42.0; tSin[0][2] = 4.00;    // 1er sinus
tSin[1][0] = 8.0 ; tSin[1][1] = 66.6; tSin[1][2] = 0.12;    // 2eme sinus
tSin[2][0] = 1.414 ; tSin[2][1] = 1.732; tSin[2][2] = 2.25; // 3eme sinus

for (int i=0;i<NB_SAMP;i++) {     // pour tous mes échantillons
  float x=sample[i][0]=random(X_MIN, X_MAX);
  float y=0;
  for (int s=0;s<NB_SIN;s++)
    y += tSin[s][0]*sin(tSin[s][1]*x+tSin[s][2]); 
  sample[i][1]=y;                 // somme de sinus stockée dans sample[][] 
}
\end                              

\After everything else function:  // typically to write the results in a file
printf("Fonction à retrouver : \ny=");
for (int s=0;s<NB_SIN;s++)
  printf("%f*sin(%f*x+%f)+",tSin[s][0], tSin[s][1], tSin[s][2]); 
printf("\b \n"); // pour effacer le dernier +

printf("Fonction trouvée : \ny="); // le meilleur individu est 
for (int s=0;s<NB_SIN;s++)         // bBest->xxx
  printf("%f*sin(%f*x+%f)+",bBest->sinus[s*3+0], bBest->sinus[s*3+1], bBest->sinus[s*3+2]);  // "*3+" remplace "]["
printf("\b \n"); // pour effacer le dernier +
\end                              

\User classes : 
GenomeClass {   
  float sinus[NB_SIN*3]; // AMP = sinus[i*3+0] FRE = sinus[i*3+1]
}                        // PHA = sinus[i*3+2]
\end

\GenomeClass::initialiser : // to define how new individuals are created
for(int s=0; s<NB_SIN; s++){
  Genome.sinus[s*3+0] = random(0.0, 10.0);  // Amplitude
  Genome.sinus[s*3+1] = random(0.0, 100.0); // Frequence 
  Genome.sinus[s*3+2] = random(0.0, 6.28);  // Phase dans [0, 2*PI[
}
\end

\GenomeClass::crossover :     // to define the crossover operator
int nLocus=random(1,NB_SIN*3);  // prend une valeur dans [1,8]
for (int i=nLocus;i<NB_SIN*3;i++) child.sinus[i]=parent2.sinus[i];   
\end

\GenomeClass::mutator :       
float fProb = random(0.0, 1.0/(NB_SIN*3.0)); // 1/nb de gènes pour voir
for (int s=0;s<NB_SIN;s++) { // remplacer "][" par "*3+"
  if (tossCoin(fProb)) Genome.sinus[s*3+0]+=random(0.0, 1.0)-0.5; // +[-0.5,0.5[
  if (tossCoin(fProb)) Genome.sinus[s*3+1]+=random(0.0, 10.0)-5.0; // +[-5,5[
  if (tossCoin(fProb)) Genome.sinus[s*3+2]+=random(0.0, 0.6)-0.3; // +[-0.3,0.3[
}
\end

\GenomeClass::evaluator :     // Returns the score of an individual called Genome
float fScore=0;             // "evaluator" returns a float
for (int i=0;i<NB_SAMP;i++) {     // pour tous mes échantillons
  float x=sample[i][0];
  float y=0;
  for (int s=0;s<NB_SIN;s++)
    y += Genome.sinus[s*3+0]*sin(Genome.sinus[s*3+1]*x+Genome.sinus[s*3+2]); 
  fScore+=abs(sample[i][1]-y);
}
return fScore;
\end

\User Makefile options:
\end

\Default run parameters :
  Number of generations : 100    
  Time limit: 0                  // In seconds, 0 to deactivate
  Population size : 10000          // POP_SIZE
  Offspring size : 100%           // 40 means 40, 40% means 40% of POP_SIZE
  Crossover probability : 1     
  Mutation probability : 1       // MUT_PROB probability to CALL the mutation function
  Evaluator goal : minimise      // (or minimize)
  Selection operator: Tournament 2 
  Surviving parents: 100%        // pre-selection of parents to be part of the next gen.
  Surviving offspring: 100%      // pre-selection of children to be part of the next gen.
  Reduce parents operator: Tournament 2   // how pre-selected parents are chosen
  Reduce offspring operator: Tournament 2 // how pre-selected children are chosen
  Final reduce operator: Tournament 2 // how the next gen. is chosen from parents + children

  Elitism: Strong			           // Strong = best parents in the next gen.
  Elite: 1                       // Weak = best of parents + children in the next gen.
  Print stats: true              // Default: true
  Generate csv stats file:false  // Default: false
  Generate gnuplot script:false  // Default: false
  Generate R script:false        // Default: false
  Plot stats:true                // Default: true

  Remote island model: false     // parallelism over several processes / machines
  IP file: ip.txt                // file containing all the remote island's IP
  Server port : 2929             // server port if several islands on the same machine
  Migration probability: 0.3     // probability of migrating the best individual / gen.

  Save population: false         // false or name of the file where to save the pop
  Start from file:false          // false or name of the file where to reload the pop
\end
